{
    "message":"OK",
    "data":{
       "art_id":139968,
       "title":"java\u540e\u7aef\u5bfc\u51faExcel",
       "pubdate":"2018-11-29T17:17:48",
       "content":"<link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-2c6a5211c9.css\"/>\n\t\t\t\t\t\t<div class=\"htmledit_views\" id=\"content_views\">\n                <p>1.jxl\u5bfc\u51faExcel\u7684\u51e0\u79cd\u65b9\u6cd5</p>\n\n<pre class=\"has\">\n<code>import jxl.CellView;\nimport jxl.SheetSettings;\nimport jxl.Workbook;\nimport jxl.format.Alignment;\nimport jxl.format.Border;\nimport jxl.format.BorderLineStyle;\nimport jxl.format.Colour;\nimport jxl.format.*;\nimport jxl.format.VerticalAlignment;\nimport jxl.write.*;\nimport org.apache.log4j.Logger;\n\nimport java.io.File;\nimport java.io.OutputStream;\nimport java.lang.reflect.Method;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\n\npublic class ExcelUtil{\n\tprivate static final Logger logger = Logger.getLogger(ExcelUtil.class);\n\t//\u6ce8\uff1arecordList\u662f\u5bf9\u8c61\u5217\u8868\n\t/*\n     * \u5bfc\u51faExcel\n     * @param recordList\uff1a\u5c06\u8981\u5bfc\u51fa\u7684\u6570\u636e\u96c6\u5408  \u5bf9\u8c61\u6570\u7ec4\n     * @param filePath\uff1a\u6307\u5b9a\u7684\u8def\u5f84\u540d\n     * @param out\uff1a\u8f93\u51fa\u6d41\u5bf9\u8c61 \u901a\u8fc7response.getOutputStream()\u4f20\u5165\n     * @param mapFields\uff1a\u5bfc\u51fa\u5b57\u6bb5 key:\u5bf9\u5e94\u5b9e\u4f53\u7c7b\u5b57\u6bb5    value\uff1a\u5bf9\u5e94\u5bfc\u51fa\u8868\u4e2d\u663e\u793a\u7684\u4e2d\u6587\u540d\n     * @param colsSize :\u5217\u5bbd\n     * @param sheetName\uff1a\u5de5\u4f5c\u8868\u540d\u79f0\n     */\n     public static void exportToExcel(List&lt;Object&gt; recordList, String filePath, \n    \t\t OutputStream out, Map&lt;String,String&gt; mapFields, int[] colsSize, String sheetName){\n    \tsheetName = (sheetName != null &amp;&amp; !sheetName.equals(\"\")) ? sheetName : \"sheet1\";\n    \tWritableWorkbook wook = null; //\u53ef\u5199\u7684\u5de5\u4f5c\u7c3f\u5bf9\u8c61\n    \tObject objClass = null;\n    \ttry{\n    \t\tif(filePath != null &amp;&amp; !filePath.equals(\"\")){    //\u6587\u4ef6\u5bfc\u51fa\n    \t\t     wook = Workbook.createWorkbook(new File(filePath));\n    \t\t}else{            //jsp\u9875\u9762\u5bfc\u51fa\n    \t\t\t wook = Workbook.createWorkbook(out);\n    \t\t}\n    \t\t//\u8bbe\u7f6e\u5934\u90e8\u5b57\u4f53\u683c\u5f0f\n    \t\tWritableFont font = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD,\n    \t\t\t\tfalse, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);\n    \t\t//\u5e94\u7528\u5b57\u4f53\n    \t\tWritableCellFormat wcfh = new WritableCellFormat(font);\n    \t\t//\u8bbe\u7f6e\u5176\u4ed6\u6837\u5f0f\n    \t\t//wcfh.setAlignment(Alignment.CENTRE);   //\u6c34\u5e73\u5bf9\u9f50\n    \t\twcfh.setAlignment(Alignment.LEFT);   //\u6c34\u5e73\u5bf9\u9f50\n    \t\twcfh.setVerticalAlignment(VerticalAlignment.CENTRE);  //\u5782\u76f4\u5bf9\u9f50\n    \t\twcfh.setBorder(Border.ALL, BorderLineStyle.THIN);  //\u8fb9\u6846\n       \t\t//wcfh.setBackground(Colour.AUTOMATIC); //\u80cc\u666f\u8272\n            wcfh.setWrap(true);       //\u4e0d\u81ea\u52a8\u6362\u884c\n            \n            //\u8bbe\u7f6e\u5185\u5bb9\u65e5\u671f\u683c\u5f0f\n            DateFormat df = new DateFormat(\"yyyy-MM-dd\");\n\t\t\t//\u8bbe\u7f6e\u5185\u5bb9\u5b57\u4f53\u683c\u5f0f\n\t\t\tWritableFont font2 = new WritableFont(WritableFont.TIMES, 10, WritableFont.NO_BOLD,\n\t\t\t\t\tfalse, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);\n\t\t\t//\u5e94\u7528\u65e5\u671f\u683c\u5f0f\n\t\t\tWritableCellFormat wcfc = new WritableCellFormat(font2,df);\n            \n            //wcfc.setAlignment(Alignment.CENTRE);\n            wcfc.setAlignment(Alignment.LEFT);  //20160420 update\n            wcfc.setVerticalAlignment(VerticalAlignment.CENTRE);\n            wcfc.setBorder(Border.ALL, BorderLineStyle.THIN);\n            wcfc.setWrap(true);//\u81ea\u52a8\u6362\u884c\n            \n            //\u521b\u5efa\u5de5\u4f5c\u8868\n            WritableSheet sheet = wook.createSheet(sheetName, 0);\n            SheetSettings setting = sheet.getSettings();\n            setting.setVerticalFreeze(1);  //\u51bb\u7ed3\u7a97\u53e3\u5934\u90e8\n            Integer colsNum = mapFields.size();\n            //\u8bbe\u7f6e\u5217\u5bbd\n            if (colsSize.length == colsNum) {  \n                for (int i = 0; i &lt; colsSize.length; i++) {  \n                    sheet.setColumnView(i, colsSize[i]);  \n                }  \n            } else {  \n                // \u8bbe\u7f6e\u9ed8\u8ba4\u7684\u5bbd\u5ea6  \n                for (int i = 0; i &lt; colsNum; i++) { \n                \tCellView cellView = new CellView();  \n                \tcellView.setAutosize(true); //\u8bbe\u7f6e\u81ea\u52a8\u5927\u5c0f  \n                \tsheet.setColumnView(i, cellView);//\u6839\u636e\u5185\u5bb9\u81ea\u52a8\u8bbe\u7f6e\u5217\u5bbd  \n                }  \n               \n            }  \n            \n            int columnIndex = 0;      //\u5217\u7d22\u5f15\n            List&lt;String&gt; methodNameList = new ArrayList&lt;String&gt;();\n            if(mapFields != null){\n            \tString key = \"\";\n            \tMap&lt;String, Method&gt; getMap = null;\n            \tMethod method = null;\n            \t//\u5f00\u59cb\u5bfc\u51fa\u8868\u683c\u5934\u90e8\n            \tfor(Iterator&lt;String&gt; i = mapFields.keySet().iterator(); i.hasNext();){\n            \t\tkey = i.next();\n            \t\t//\u5e94\u7528wcfh\u6837\u5f0f\u521b\u5efa\u5355\u5143\u683c\n            \t\tsheet.addCell(new Label(columnIndex, 0, mapFields.get(key),wcfh));\n            \t    methodNameList.add(key);\n            \t    columnIndex++;\n            \t}\n            \tif(recordList != null &amp;&amp; recordList.size() &gt; 0){\n            \t\t//\u5bfc\u51fa\u8868\u683c\u5185\u5bb9\n            \t\tfor(int i = 0, len = recordList.size(); i&lt;len ; i++){\n            \t\t\tobjClass = recordList.get(i);\n            \t\t\tgetMap = getAllMethod(objClass);  //\u83b7\u5f97\u5bf9\u8c61\u6240\u6709\u7684get\u65b9\u6cd5\n            \t\t    //\u6309\u4fdd\u5b58\u7684\u5b57\u6bb5\u987a\u5e8f\u5bfc\u51fa\u5185\u5bb9\n            \t\t\tfor(int j = 0; j &lt; methodNameList.size(); j++){\n            \t\t\t\t//\u6839\u636ekey\u83b7\u53d6\u5bf9\u5e94\u65b9\u6cd5\n            \t\t\t\tmethod = getMap.get(\"GET\" + methodNameList.get(j).toString().toUpperCase());\n            \t\t\t\tif(method != null){\n            \t\t\t\t\t//\u4ece\u5bf9\u5e94\u7684get\u65b9\u6cd5\u5f97\u5230\u8fd4\u56de\u503c\n            \t\t\t\t\t//System.out.println(\"method: \" + method);\n            \t\t\t\t\tString value = \"\";\n            \t\t\t\t\t\n            \t\t\t\t\t//20160304 update\n         \t\t\t\t\t\tif(method.getGenericReturnType().toString().equals(\"class java.util.Date\")){\n         \t\t\t\t\t\t\t SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n         \t\t\t\t\t\t\t \n         \t\t\t\t\t\t\t if(method.invoke(objClass, (Object[])null) == null){\n         \t\t\t\t\t\t\t\t value = \"\";\n         \t\t\t\t\t\t\t }else{\n         \t\t\t\t\t\t\t\t value = formatter.format(method.invoke(objClass, (Object[])null));\n         \t\t\t\t\t\t\t }\n         \t\t\t\t\t\t}else if(method.getGenericReturnType().toString().equals(\"class java.sql.Date\")){  //20160421 update\n            \t\t\t\t\t\t\t SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n            \t\t\t\t\t\t\t \n            \t\t\t\t\t\t\t if(method.invoke(objClass, (Object[])null) == null){\n            \t\t\t\t\t\t\t\t value = \"\";\n            \t\t\t\t\t\t\t }else{\n            \t\t\t\t\t\t\t\t value = formatter.format(method.invoke(objClass, (Object[])null));\n            \t\t\t\t\t\t\t }\n            \t\t\t\t\t}\n         \t\t\t\t\t\telse{\n         \t\t\t\t\t\t\t if(method.invoke(objClass, (Object[])null) == null){\n         \t\t\t\t\t\t\t\t value = \"\";\n         \t\t\t\t\t\t\t }else{\n         \t\t\t\t\t\t\t\t value = method.invoke(objClass, (Object[])null).toString();\n         \t\t\t\t\t\t\t }\n         \t\t\t\t\t\t}\n         \t\t\t\t\t\t\n            \t\t\t\t\t//\u5e94\u7528wcfc\u6837\u5f0f\u521b\u5efa\u5355\u5143\u683c\n            \t\t\t\t\tsheet.addCell(new Label(j, i+1, value, wcfc));\n            \t\t\t\t}else{\n            \t\t\t\t\tsheet.addCell(new Label(j, i+1, \"\", wcfc));\n            \t\t\t\t}\n            \t\t\t}   //\u5185\u5bb9\u5bfc\u51fa\u91cc\u5c42for\u5faa\u73af\u7ed3\u675f\n            \t\t}       //\u5185\u5bb9\u5bfc\u51fa\u5916\u5c42for\u5faa\u73af\u7ed3\u675f\n            \t}       //recordList\u4e0d\u4e3a\u7a7a\n            \twook.write();\n            \tSystem.out.println(\"\u5bfc\u51faExcel\u6210\u529f\");\n            }/*else{   //\u5b57\u6bb5\u53c2\u6570\u4e3anull\n            \tthrow new Exception(\"\u4f20\u5165\u53c2\u6570\u4e0d\u5408\u6cd5\");\n            }*/\n    \t}catch(Exception e){\n    \t\te.printStackTrace();\n    \t}finally{\n    \t\ttry{\n    \t\t\tif(wook != null){\n    \t\t\t\twook.close();\n    \t\t\t}\n    \t\t\tif(out != null){\n    \t\t\t\tout.flush();\n    \t\t\t\tout.close();\n    \t\t\t}\n    \t\t}catch(Exception e2){\n    \t\t\te2.printStackTrace();\n    \t\t}\n    \t} //finally\u7ed3\u675f\n    \t\n    }\n     \n     /**\n \t * \u83b7\u53d6\u7c7b\u7684\u6240\u6709get\u65b9\u6cd5\n \t * @param obj\n \t * @return \u7c7b\u4e2d\u6240\u6709\u7684get\u65b9\u6cd5\n \t */ \n \tpublic static HashMap&lt;String, Method&gt; getAllMethod(Object obj) throws Exception{\n \t\tHashMap&lt;String, Method&gt; map = new HashMap&lt;String, Method&gt;();\n \t\tMethod[] methods = obj.getClass().getMethods();\n \t\tString methodName = \"\";\n \t\tfor(int i = 0; i &lt; methods.length; i++){\n \t\t\tmethodName = methods[i].getName().toUpperCase();\n \t\t\tif(methodName.startsWith(\"GET\")){\n \t\t\t\tmap.put(methodName, methods[i]);\n \t\t\t}\n \t\t\t\n \t\t}\n \t\treturn map;\n \t}\n\n \t/**\u5c06\u5bf9\u8c61\u5217\u8868\u8f6c\u5316\u4e3a\u4e8c\u7ef4\u6570\u636e\u5217\u8868\n\t * @param recordList \u5bf9\u8c61\u5217\u8868\n\t * @param methodNameList \u9700\u8981\u653e\u5165\u6570\u636e\u5217\u8868\u4e2d\u7684\u5b57\u6bb5\u540d\n\t * */\n \tpublic static List&lt;Object&gt; convertObjectListToDataList(List recordList,List&lt;String&gt; methodNameList) throws Exception {\n\t\tList&lt;Object&gt; dataList = new ArrayList&lt;Object&gt;();\n\t\tMap&lt;String, Method&gt; getMap = null;\n\t\tMethod method = null;\n\n\t\tif (recordList != null &amp;&amp; recordList.size() &gt; 0) {\n\t\t\t//\u5bfc\u51fa\u8868\u683c\u5185\u5bb9\n\t\t\tfor (int i = 0, len = recordList.size(); i &lt; len; i++) {\n\t\t\t\tList&lt;Object&gt; tempList = new ArrayList&lt;Object&gt;();\n\n\t\t\t\tObject temp = recordList.get(i);\n\t\t\t\tgetMap = getAllMethod(temp);  //\u83b7\u5f97\u5bf9\u8c61\u6240\u6709\u7684get\u65b9\u6cd5\n\t\t\t\t//\u6309\u4fdd\u5b58\u7684\u5b57\u6bb5\u987a\u5e8f\u5bfc\u51fa\u5185\u5bb9\n\t\t\t\tfor (int j = 0; j &lt; methodNameList.size(); j++) {\n\t\t\t\t\t//\u6839\u636ekey\u83b7\u53d6\u5bf9\u5e94\u65b9\u6cd5\n\t\t\t\t\tmethod = getMap.get(\"GET\" + methodNameList.get(j).toString().toUpperCase());\n\t\t\t\t\tif (method != null) {\n\t\t\t\t\t\t//\u4ece\u5bf9\u5e94\u7684get\u65b9\u6cd5\u5f97\u5230\u8fd4\u56de\u503c\n\t\t\t\t\t\t//System.out.println(\"method: \" + method);\n\t\t\t\t\t\tString value = \"\";\n\t\t\t\t\t\t//20160304 update\n\t\t\t\t\t\tif (method.getGenericReturnType().toString().equals(\"class java.util.Date\")) {\n\t\t\t\t\t\t\tSimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\t\t\t\t\t\tif (method.invoke(temp, (Object[]) null) == null) {\n\t\t\t\t\t\t\t\tvalue = \"\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvalue = formatter.format(method.invoke(temp, (Object[]) null));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (method.getGenericReturnType().toString().equals(\"class java.sql.Date\")) {  //20160421 update\n\t\t\t\t\t\t\tSimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n\n\t\t\t\t\t\t\tif (method.invoke(temp, (Object[]) null) == null) {\n\t\t\t\t\t\t\t\tvalue = \"\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvalue = formatter.format(method.invoke(temp, (Object[]) null));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}  else if (method.getGenericReturnType().toString().equals(\"class java.sql.Timestamp\")) {  //20160421 update\n\t\t\t\t\t\t\tSimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n\n\t\t\t\t\t\t\tif (method.invoke(temp, (Object[]) null) == null) {\n\t\t\t\t\t\t\t\tvalue = \"\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvalue = formatter.format(method.invoke(temp, (Object[]) null));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (method.invoke(temp, (Object[]) null) == null) {\n\t\t\t\t\t\t\t\tvalue = \"\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvalue = method.invoke(temp, (Object[]) null).toString();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//\u5e94\u7528wcfc\u6837\u5f0f\u521b\u5efa\u5355\u5143\u683c\n\t\t\t\t\t\tif(value.equals(\"\")){\n\t\t\t\t\t\t\ttempList.add(\"\\\\\");\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\ttempList.add(value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttempList.add(\"\\\\\");\n\t\t\t\t\t}\n\t\t\t\t}   //\u5185\u5bb9\u5bfc\u51fa\u91cc\u5c42for\u5faa\u73af\u7ed3\u675f\n\n\t\t\t\tdataList.add(tempList);\n\t\t\t}       //\u5185\u5bb9\u5bfc\u51fa\u5916\u5c42for\u5faa\u73af\u7ed3\u675f\n\t\t}       //recordList\u4e0d\u4e3a\u7a7a\n\n\n\t\treturn dataList;\n\n\t}\n \t\n \t/*public static void main(String[] args) throws Exception{\n \t\tSendTaskInnerQuery obj = new SendTaskInnerQuery();\n \t\tgetAllMethod(obj);\n \t}*/\n \t\n \t /**\n     * \u6839\u636e\u6307\u5b9a\u8def\u5f84\u5bfc\u51faExcel\n     * @param list\n     * @param filePath\n     * @param mapFields\n     * @param sheetName\n     */\n    public static void ImportExcel(List list,String filePath,Map&lt;String, String&gt; mapFields,int[] colsSize,String sheetName){\n    \texportToExcel(list,filePath,null,mapFields,colsSize,sheetName);\n    }                                                              \n    /**\n     * \u4eceJsp\u9875\u9762\u5bfc\u51faExcel\n     * @param list\n     * @param out\n     * @param mapFields\n\t * @param colsSize\n     * @param sheetName\n     */\n    public static void ImportExcel(List list,OutputStream out,Map&lt;String, String&gt; mapFields,int[] colsSize, String sheetName){\n    \texportToExcel(list,null,out,mapFields,colsSize,sheetName);\n    }\n   \n    //\u6ce8\uff1arecordList\u662f\u5217\u8868\u7684\u5217\u8868\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\n    /**\n     * \u5bfc\u51faExcel\n     * @param recordList\uff1a\u5c06\u8981\u5bfc\u51fa\u7684\u6570\u636e\u96c6\u5408  \u4e8c\u7ef4\u6570\u7ec4\n     * @param filePath\uff1a\u6307\u5b9a\u7684\u8def\u5f84\u540d\n     * @param out\uff1a\u8f93\u51fa\u6d41\u5bf9\u8c61 \u901a\u8fc7response.getOutputStream()\u4f20\u5165\n     * @param mapFields\uff1a\u5bfc\u51fa\u5b57\u6bb5 key:\u5bf9\u5e94\u5b9e\u4f53\u7c7b\u5b57\u6bb5    value\uff1a\u5bf9\u5e94\u5bfc\u51fa\u8868\u4e2d\u663e\u793a\u7684\u4e2d\u6587\u540d\n     * @param colsSize :\u5217\u5bbd\n     * @param sheetName\uff1a\u5de5\u4f5c\u8868\u540d\u79f0\n     */\n     public static void exportToExcel2(List&lt;Object&gt; recordList, String filePath,\n    \t\t OutputStream out, Map&lt;String,String&gt; mapFields, int[] colsSize, String sheetName){\n    \tsheetName = (sheetName != null &amp;&amp; !sheetName.equals(\"\")) ? sheetName : \"sheet1\";\n    \tWritableWorkbook wook = null; //\u53ef\u5199\u7684\u5de5\u4f5c\u7c3f\u5bf9\u8c61\n    \tList&lt;Object&gt; objClass = null;\n    \ttry{\n    \t\tif(filePath != null &amp;&amp; !filePath.equals(\"\")){    //\u6587\u4ef6\u5bfc\u51fa\n    \t\t     wook = Workbook.createWorkbook(new File(filePath));\n    \t\t}else{            //jsp\u9875\u9762\u5bfc\u51fa\n    \t\t\t wook = Workbook.createWorkbook(out);\n    \t\t}\n    \t\t//\u8bbe\u7f6e\u5934\u90e8\u5b57\u4f53\u683c\u5f0f\n    \t\tWritableFont font = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD,\n    \t\t\t\tfalse, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);\n    \t\t//\u5e94\u7528\u5b57\u4f53\n    \t\tWritableCellFormat wcfh = new WritableCellFormat(font);\n    \t\t//\u8bbe\u7f6e\u5176\u4ed6\u6837\u5f0f\n    \t\twcfh.setAlignment(Alignment.CENTRE);   //\u6c34\u5e73\u5bf9\u9f50\n    \t\twcfh.setVerticalAlignment(VerticalAlignment.CENTRE);  //\u5782\u76f4\u5bf9\u9f50\n    \t\twcfh.setBorder(Border.ALL, BorderLineStyle.THIN);  //\u8fb9\u6846\n       \t\t//wcfh.setBackground(Colour.AUTOMATIC); //\u80cc\u666f\u8272\n            wcfh.setWrap(true);       //\u4e0d\u81ea\u52a8\u6362\u884c\n            \n            //\u8bbe\u7f6e\u5185\u5bb9\u65e5\u671f\u683c\u5f0f\n            DateFormat df = new DateFormat(\"yyyy-MM-dd\");\n\t\t\t//\u8bbe\u7f6e\u5185\u5bb9\u5b57\u4f53\u683c\u5f0f\n\t\t\tWritableFont font2 = new WritableFont(WritableFont.TIMES, 10, WritableFont.NO_BOLD,\n\t\t\t\t\tfalse, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);\n            //\u5e94\u7528\u65e5\u671f\u683c\u5f0f\n            WritableCellFormat wcfc = new WritableCellFormat(font2,df);\n            \n            wcfc.setAlignment(Alignment.LEFT);\n            wcfc.setVerticalAlignment(VerticalAlignment.CENTRE);\n            wcfc.setBorder(Border.ALL, BorderLineStyle.THIN);\n            wcfc.setWrap(true);//\u81ea\u52a8\u6362\u884c\n            \n            //\u521b\u5efa\u5de5\u4f5c\u8868\n            WritableSheet sheet = wook.createSheet(sheetName, 0);\n            SheetSettings setting = sheet.getSettings();\n            setting.setVerticalFreeze(1);  //\u51bb\u7ed3\u7a97\u53e3\u5934\u90e8\n            Integer colsNum = mapFields.size();\n            //\u8bbe\u7f6e\u5217\u5bbd\n            if (colsSize.length == colsNum) {  \n                for (int i = 0; i &lt; colsSize.length; i++) {  \n                    sheet.setColumnView(i, colsSize[i]);  \n                }  \n            } else {  \n                // \u8bbe\u7f6e\u9ed8\u8ba4\u7684\u5bbd\u5ea6  \n                for (int i = 0; i &lt; colsNum; i++) { \n                \tCellView cellView = new CellView();  \n                \tcellView.setAutosize(true); //\u8bbe\u7f6e\u81ea\u52a8\u5927\u5c0f  \n                \tsheet.setColumnView(i, cellView);//\u6839\u636e\u5185\u5bb9\u81ea\u52a8\u8bbe\u7f6e\u5217\u5bbd  \n                }  \n               \n            }  \n            \n            int columnIndex = 0;      //\u5217\u7d22\u5f15\n            List&lt;String&gt; methodNameList = new ArrayList&lt;String&gt;();\n            if(mapFields != null){\n            \tString key = \"\";\n            \tMap&lt;String, Method&gt; getMap = null;\n            \tMethod method = null;\n            \t//\u5f00\u59cb\u5bfc\u51fa\u8868\u683c\u5934\u90e8\n            \tfor(Iterator&lt;String&gt; i = mapFields.keySet().iterator(); i.hasNext();){\n            \t\tkey = i.next();\n            \t\t//\u5e94\u7528wcfh\u6837\u5f0f\u521b\u5efa\u5355\u5143\u683c\n            \t\tsheet.addCell(new Label(columnIndex, 0, mapFields.get(key),wcfh));\n            \t    methodNameList.add(key);\n            \t    columnIndex++;\n            \t}\n            \tif(recordList != null &amp;&amp; recordList.size() &gt; 0){\n            \t\t//\u5bfc\u51fa\u8868\u683c\u5185\u5bb9\n            \t\tSystem.out.println(\"recordList.size():\" + recordList.size());\n            \t\tSystem.out.println(\"recordList.get(0).size():\" + ((List)recordList.get(0)).size());\n            \t\tfor(int i = 0, len = recordList.size(); i&lt;len ; i++){\n            \t\t\tobjClass =(List) recordList.get(i);\n            \t\t\t//System.out.println(\"objClass.size():\" + objClass.size());\n            \t\t    //\u6309\u4fdd\u5b58\u7684\u5b57\u6bb5\u987a\u5e8f\u5bfc\u51fa\u5185\u5bb9\n            \t\t\tfor(int j = 0; j &lt; objClass.size(); j++){\n            \t\t\t\t//\u6839\u636ekey\u83b7\u53d6\u5bf9\u5e94\u65b9\u6cd5\n            \t\t\t\t//String value = (String)objClass.get(j);\n            \t\t\t\tString value = String.valueOf(objClass.get(j));\n            \t\t\t\t//\u5e94\u7528wcfc\u6837\u5f0f\u521b\u5efa\u5355\u5143\u683c\n            \t\t\t    sheet.addCell(new Label(j, i+1, value, wcfc));\n            \t\t\t\t\n            \t\t\t}   //\u5185\u5bb9\u5bfc\u51fa\u91cc\u5c42for\u5faa\u73af\u7ed3\u675f\n            \t\t}       //\u5185\u5bb9\u5bfc\u51fa\u5916\u5c42for\u5faa\u73af\u7ed3\u675f\n            \t}       //recordList\u4e0d\u4e3a\u7a7a\n            \twook.write();\n            \tSystem.out.println(\"\u5bfc\u51faExcel\u6210\u529f\");\n            }/*else{   //\u5b57\u6bb5\u53c2\u6570\u4e3anull\n            \tthrow new Exception(\"\u4f20\u5165\u53c2\u6570\u4e0d\u5408\u6cd5\");\n            }*/\n    \t}catch(Exception e){\n    \t\te.printStackTrace();\n    \t}finally{\n    \t\ttry{\n    \t\t\tif(wook != null){\n    \t\t\t\twook.close();\n    \t\t\t}\n    \t\t\tif(out != null){\n    \t\t\t\tout.flush();\n    \t\t\t\tout.close();\n    \t\t\t}\n    \t\t}catch(Exception e2){\n    \t\t\te2.printStackTrace();\n    \t\t}\n    \t} //finally\u7ed3\u675f\n    \t\n    }\n     \n     /**\n      * \u6839\u636e\u6307\u5b9a\u8def\u5f84\u5bfc\u51faExcel\n      * @param list\n      * @param filePath\n      * @param mapFields\n      * @param sheetName\n      */\n     public static void ImportExcel2(List list,String filePath,Map&lt;String, String&gt; mapFields,int[] colsSize,String sheetName){\n     \texportToExcel2(list,filePath,null,mapFields,colsSize,sheetName);\n     }\n     \n     /**\n      * \u4eceJsp\u9875\u9762\u5bfc\u51faExcel\n      * @param list\n      * @param out\n      * @param mapFields\n      * @param sheetName\n      */\n     public static void ImportExcel2(List list,OutputStream out,Map&lt;String, String&gt; mapFields,int[] colsSize,String sheetName){\n     \texportToExcel2(list,null,out,mapFields,colsSize,sheetName);\n     }\n \t\n     \n   //\u6ce8\uff1arecordList\u662f\u5217\u8868\u7684\u5217\u8868\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4;   \u6807\u9898\u884c\u53ef\u4ee5\u662f\u591a\u884c  \n     /**\n      * \u5bfc\u51faExcel\n      * @param recordList\uff1a\u5c06\u8981\u5bfc\u51fa\u7684\u6570\u636e\u96c6\u5408  \u4e8c\u7ef4\u6570\u7ec4\n      * @param filePath\uff1a\u6307\u5b9a\u7684\u8def\u5f84\u540d\n      * @param out\uff1a\u8f93\u51fa\u6d41\u5bf9\u8c61 \u901a\u8fc7response.getOutputStream()\u4f20\u5165\n      * @param mapFields\uff1a\u4e8c\u7ef4\u6570\u7ec4  \u4e00\u7ef4\u7684\u5927\u5c0f\u662f\u6807\u9898\u884c\u7684\u884c\u6570  \u4e8c\u7ef4\u7684\u5927\u5c0f\u662f\u6807\u9898\u884c\u7684\u5217\u6570 \n      * @param colsSize :\u5217\u5bbd\n      * @param sheetName\uff1a\u5de5\u4f5c\u8868\u540d\u79f0\n      * @param mergePosList \u4e8c\u7ef4\u6570\u7ec4  \u6bcf\u4e2a\u4e00\u7ef4\u5305\u542b \u5408\u5e76\u5355\u5143\u683c\u7684\u5217\u8868\u5750\u6807 \u8d77\u59cb\u5217 \u8d77\u59cb\u884c  \u7ed3\u675f\u5217  \u7ed3\u675f\u884c\n      */\n      public static void exportToExcel3(List&lt;Object&gt; recordList, String filePath, \n     \t\t OutputStream out, List&lt;Object&gt; mapFields, int[] colsSize, String sheetName, List&lt;Object&gt; mergePosList){\n     \tlogger.info(\"filePath: \" + filePath);\n    \tsheetName = (sheetName != null &amp;&amp; !sheetName.equals(\"\")) ? sheetName : \"sheet1\";\n     \tWritableWorkbook wook = null; //\u53ef\u5199\u7684\u5de5\u4f5c\u7c3f\u5bf9\u8c61\n     \tList&lt;Object&gt; objClass = null;\n     \tint titleRowNum = 0;\n     \tif(mapFields != null){\n     \t\ttitleRowNum = mapFields.size();\n     \t}\n     \t\n     \ttry{\n     \t\tif(filePath != null &amp;&amp; !filePath.equals(\"\")){    //\u6587\u4ef6\u5bfc\u51fa\n     \t\t     wook = Workbook.createWorkbook(new File(filePath));\n     \t\t}else{            //jsp\u9875\u9762\u5bfc\u51fa\n     \t\t\t wook = Workbook.createWorkbook(out);\n     \t\t}\n     \t\t//\u8bbe\u7f6e\u5934\u90e8\u5b57\u4f53\u683c\u5f0f\n     \t\tWritableFont font = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD,\n     \t\t\t\tfalse, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);\n     \t\t//\u5e94\u7528\u5b57\u4f53\n     \t\tWritableCellFormat wcfh = new WritableCellFormat(font);\n     \t\t//\u8bbe\u7f6e\u5176\u4ed6\u6837\u5f0f\n     \t\twcfh.setAlignment(Alignment.CENTRE);   //\u6c34\u5e73\u5bf9\u9f50\n     \t\twcfh.setVerticalAlignment(VerticalAlignment.CENTRE);  //\u5782\u76f4\u5bf9\u9f50\n     \t\twcfh.setBorder(Border.ALL, BorderLineStyle.THIN);  //\u8fb9\u6846\n        \t\t//wcfh.setBackground(Colour.AUTOMATIC); //\u80cc\u666f\u8272\n             wcfh.setWrap(true);       //\u81ea\u52a8\u6362\u884c\n             \n             //\u8bbe\u7f6e\u5185\u5bb9\u65e5\u671f\u683c\u5f0f\n             DateFormat df = new DateFormat(\"yyyy-MM-dd\");\n             //\u5e94\u7528\u65e5\u671f\u683c\u5f0f\n\t\t\t//\u8bbe\u7f6e\u5185\u5bb9\u5b57\u4f53\u683c\u5f0f\n\t\t\tWritableFont font2 = new WritableFont(WritableFont.TIMES, 10, WritableFont.NO_BOLD,\n\t\t\t\t\tfalse, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);\n             WritableCellFormat wcfc = new WritableCellFormat(font2,df);\n             \n             wcfc.setAlignment(Alignment.LEFT);\n             wcfc.setVerticalAlignment(VerticalAlignment.CENTRE);\n             wcfc.setBorder(Border.ALL, BorderLineStyle.THIN);\n             wcfc.setWrap(true);\n             \n             //\u521b\u5efa\u5de5\u4f5c\u8868\n             WritableSheet sheet = wook.createSheet(sheetName, 0);\n             SheetSettings setting = sheet.getSettings();\n             setting.setVerticalFreeze(2);  //\u51bb\u7ed3\u7a97\u53e3\u5934\u90e8\n             Integer colsNum = 0;\n             if(mapFields != null &amp;&amp; mapFields.size() != 0){\n                  colsNum = ((List)mapFields.get(0)).size();\n             }\n             logger.info(\"export excel 3 colsNum: \" + colsNum);\n             //\u8bbe\u7f6e\u5217\u5bbd\n             if (colsSize.length == colsNum) {  \n                 for (int i = 0; i &lt; colsSize.length; i++) {  \n                     sheet.setColumnView(i, colsSize[i]);  \n                 }  \n             } else {  \n                 // \u8bbe\u7f6e\u9ed8\u8ba4\u7684\u5bbd\u5ea6  \n                 for (int i = 0; i &lt; colsNum; i++) { \n                 \tCellView cellView = new CellView();  \n                 \tcellView.setAutosize(true); //\u8bbe\u7f6e\u81ea\u52a8\u5927\u5c0f  \n                 \tsheet.setColumnView(i, cellView);//\u6839\u636e\u5185\u5bb9\u81ea\u52a8\u8bbe\u7f6e\u5217\u5bbd  \n                 }  \n                \n             }\n\n\t\t\t//20170905 add \u8bbe\u7f6e\u884c\u9ad8\n\t\t\tif(recordList != null &amp;&amp; recordList.size() &gt; 0){\n\t\t\t\t//\u6807\u9898\u884c\n\t\t\t\tsheet.setRowView(0, 500,false);\n\t\t\t\tfor (int i = 0; i &lt; recordList.size(); i++) {\n\t\t\t\t\tsheet.setRowView(i+1, 500,false);\n\t\t\t\t}\n\t\t\t}\n\n             //\u5411Excel\u4e2d\u5199\u6807\u9898\u884c\n             if(mapFields != null){\n             \t//\u5f00\u59cb\u5bfc\u51fa\u8868\u683c\u5934\u90e8\n             \tfor(int i = 0; i&lt;mapFields.size(); i++){//\u6807\u9898\u884c\n             \t\tList&lt;Object&gt; tempList = (List&lt;Object&gt;)mapFields.get(i);\n             \t\t\n             \t\tfor(int j=0; j&lt;tempList.size(); j++){//\u6807\u9898\u5217\n             \t\t  //\u5e94\u7528wcfh\u6837\u5f0f\u521b\u5efa\u5355\u5143\u683c\n             \t\t   sheet.addCell(new Label(j, i, String.valueOf(tempList.get(j)),wcfh)); \n             \t\t}\n             \t}\n             \t\n             \t//\u5408\u5e76\u6807\u9898\u884c\u5355\u5143\u683c\n             \tlogger.info(\"mergePosList.size(): \" + mergePosList.size());\n             \tfor(int i=0; i&lt;mergePosList.size(); i++){\n             \t\tList&lt;Object&gt; tempPosList = (List&lt;Object&gt;)mergePosList.get(i);\n             \t\t\n             \t    sheet.mergeCells((Integer)tempPosList.get(0), (Integer)tempPosList.get(1),\n             \t    \t\t(Integer)tempPosList.get(2), (Integer)tempPosList.get(3)); \n                    logger.info(\"i: \" + i + \"-- \" + (Integer)tempPosList.get(0)+ \",\"+(Integer)tempPosList.get(1)\n                    \t\t+\",\" + (Integer)tempPosList.get(2) + \",\" + (Integer)tempPosList.get(3));\n             \t}\n             \t\n             \t//\u5411Excel\u4e2d\u5199\u5185\u5bb9\u884c\n             \tif(recordList != null &amp;&amp; recordList.size() &gt; 0){\n             \t\t//\u5bfc\u51fa\u8868\u683c\u5185\u5bb9\n             \t\tSystem.out.println(\"recordList.size():\" + recordList.size());\n             \t\tSystem.out.println(\"recordList.get(0).size():\" + ((List)recordList.get(0)).size());\n             \t\tfor(int i = 0, len = recordList.size(); i&lt;len ; i++){\n             \t\t\tobjClass =(List) recordList.get(i);\n             \t\t\t//System.out.println(\"objClass.size():\" + objClass.size());\n             \t\t    //\u6309\u4fdd\u5b58\u7684\u5b57\u6bb5\u987a\u5e8f\u5bfc\u51fa\u5185\u5bb9\n             \t\t\tfor(int j = 0; j &lt; objClass.size(); j++){\n             \t\t\t\t//\u6839\u636ekey\u83b7\u53d6\u5bf9\u5e94\u65b9\u6cd5\n             \t\t\t\t//String value = (String)objClass.get(j);\n             \t\t\t\tString value = String.valueOf(objClass.get(j));\n             \t\t\t\t//\u5e94\u7528wcfc\u6837\u5f0f\u521b\u5efa\u5355\u5143\u683c\n             \t\t\t    sheet.addCell(new Label(j, i+titleRowNum, value, wcfc));\n             \t\t\t\t\n             \t\t\t}   //\u5185\u5bb9\u5bfc\u51fa\u91cc\u5c42for\u5faa\u73af\u7ed3\u675f\n             \t\t}       //\u5185\u5bb9\u5bfc\u51fa\u5916\u5c42for\u5faa\u73af\u7ed3\u675f\n             \t}       //recordList\u4e0d\u4e3a\u7a7a\n             \t\n             \twook.write();\n             \tSystem.out.println(\"\u5bfc\u51faExcel\u6210\u529f\");\n             }else{   //\u5b57\u6bb5\u53c2\u6570\u4e3anull\n             \tthrow new Exception(\"\u4f20\u5165\u53c2\u6570\u4e0d\u5408\u6cd5\");\n             }\n     \t}catch(Exception e){\n     \t\te.printStackTrace();\n     \t}finally{\n     \t\ttry{\n     \t\t\tif(wook != null){\n     \t\t\t\twook.close();\n     \t\t\t}\n     \t\t\tif(out != null){\n     \t\t\t\tout.flush();\n     \t\t\t\tout.close();\n     \t\t\t}\n     \t\t}catch(Exception e2){\n     \t\t\te2.printStackTrace();\n     \t\t}\n     \t} //finally\u7ed3\u675f\n     \t\n     }\n      \n      /**\n       * \u6839\u636e\u6307\u5b9a\u8def\u5f84\u5bfc\u51faExcel\n       * @param list\n       * @param filePath\n       * @param mapFields\n       * @param sheetName\n       */\n      public static void ImportExcel3(List list,String filePath, List&lt;Object&gt; mapFields,int[] colsSize,String sheetName,List&lt;Object&gt; mergePosList){\n      \texportToExcel3(list,filePath,null,mapFields,colsSize,sheetName,mergePosList);\n      }\n      \n      /**\n       * \u4eceJsp\u9875\u9762\u5bfc\u51faExcel\n       * @param list\n       * @param out\n       * @param mapFields\n       * @param sheetName\n       */\n      public static void ImportExcel3(List list,OutputStream out, List&lt;Object&gt; mapFields,int[] colsSize,String sheetName,List&lt;Object&gt; mergePosList){\n      \texportToExcel3(list,null,out,mapFields,colsSize,sheetName,mergePosList);\n      }\n   \n      /**\n       * @param wook \u5de5\u4f5c\u7c3f\n       * @param index sheet\u7d22\u5f15\n       * */\n      //20160214 \u6dfb\u52a0\u53ef\u4ee5\u5bfc\u51fa\u591a\u4e2asheet\u7684excel\u65b9\u6cd5\n      public static void exportToExcelSheet(List&lt;Object&gt; recordList, String filePath, \n     \t\t OutputStream out, Map&lt;String,String&gt; mapFields, int[] colsSize, String sheetName,WritableWorkbook wook,int index) throws Exception{\n     \t    sheetName = (sheetName != null &amp;&amp; !sheetName.equals(\"\")) ? sheetName : \"sheet1\";\n     \t\n     \t    Object objClass = null;\n     \t\n     \t\t//\u8bbe\u7f6e\u5934\u90e8\u5b57\u4f53\u683c\u5f0f\n     \t\tWritableFont font = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD,\n     \t\t\t\tfalse, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);\n     \t\t//\u5e94\u7528\u5b57\u4f53\n     \t\tWritableCellFormat wcfh = new WritableCellFormat(font);\n     \t\t//\u8bbe\u7f6e\u5176\u4ed6\u6837\u5f0f\n     \t\twcfh.setAlignment(Alignment.CENTRE);   //\u6c34\u5e73\u5bf9\u9f50\n     \t\twcfh.setVerticalAlignment(VerticalAlignment.CENTRE);  //\u5782\u76f4\u5bf9\u9f50\n     \t\twcfh.setBorder(Border.ALL, BorderLineStyle.THIN);  //\u8fb9\u6846\n        \t\t//wcfh.setBackground(Colour.AUTOMATIC); //\u80cc\u666f\u8272\n             wcfh.setWrap(true);       //\u4e0d\u81ea\u52a8\u6362\u884c\n             \n             //\u8bbe\u7f6e\u5185\u5bb9\u65e5\u671f\u683c\u5f0f\n             DateFormat df = new DateFormat(\"yyyy-MM-dd\");\n\t\t     //\u8bbe\u7f6e\u5185\u5bb9\u5b57\u4f53\u683c\u5f0f\n\t\t     WritableFont font2 = new WritableFont(WritableFont.TIMES, 10, WritableFont.NO_BOLD,\n\t\t\t\t\t  false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);\n\t\t     //\u5e94\u7528\u65e5\u671f\u683c\u5f0f\n\t\t     WritableCellFormat wcfc = new WritableCellFormat(font2,df);\n             \n             wcfc.setAlignment(Alignment.LEFT);\n             wcfc.setVerticalAlignment(VerticalAlignment.CENTRE);\n             wcfc.setBorder(Border.ALL, BorderLineStyle.THIN);\n             wcfc.setWrap(true);//\u81ea\u52a8\u6362\u884c\n             \n             //\u521b\u5efa\u5de5\u4f5c\u8868\n             WritableSheet sheet = wook.createSheet(sheetName, index);//index\u662fsheet\u7684\u7d22\u5f15\n             SheetSettings setting = sheet.getSettings();\n             setting.setVerticalFreeze(1);  //\u51bb\u7ed3\u7a97\u53e3\u5934\u90e8\n             Integer colsNum = mapFields.size();\n             //\u8bbe\u7f6e\u5217\u5bbd\n             if (colsSize.length == colsNum) {  \n                 for (int i = 0; i &lt; colsSize.length; i++) {  \n                     sheet.setColumnView(i, colsSize[i]);  \n                 }  \n             } else {  \n                 // \u8bbe\u7f6e\u9ed8\u8ba4\u7684\u5bbd\u5ea6  \n                 for (int i = 0; i &lt; colsNum; i++) { \n                 \tCellView cellView = new CellView();  \n                 \tcellView.setAutosize(true); //\u8bbe\u7f6e\u81ea\u52a8\u5927\u5c0f  \n                 \tsheet.setColumnView(i, cellView);//\u6839\u636e\u5185\u5bb9\u81ea\u52a8\u8bbe\u7f6e\u5217\u5bbd  \n                 }  \n                \n             }  \n             \n             int columnIndex = 0;      //\u5217\u7d22\u5f15\n             List&lt;String&gt; methodNameList = new ArrayList&lt;String&gt;();\n             if(mapFields != null){\n             \tString key = \"\";\n             \tMap&lt;String, Method&gt; getMap = null;\n             \tMethod method = null;\n             \t//\u5f00\u59cb\u5bfc\u51fa\u8868\u683c\u5934\u90e8\n             \tfor(Iterator&lt;String&gt; i = mapFields.keySet().iterator(); i.hasNext();){\n             \t\tkey = i.next();\n             \t\t//\u5e94\u7528wcfh\u6837\u5f0f\u521b\u5efa\u5355\u5143\u683c\n             \t\tsheet.addCell(new Label(columnIndex, 0, mapFields.get(key),wcfh));\n             \t    methodNameList.add(key);\n             \t    columnIndex++;\n             \t}\n             \tif(recordList != null &amp;&amp; recordList.size() &gt; 0){\n             \t\t//\u5bfc\u51fa\u8868\u683c\u5185\u5bb9\n             \t\tfor(int i = 0, len = recordList.size(); i&lt;len ; i++){\n             \t\t\tobjClass = recordList.get(i);\n             \t\t\tgetMap = getAllMethod(objClass);  //\u83b7\u5f97\u5bf9\u8c61\u6240\u6709\u7684get\u65b9\u6cd5\n             \t\t    //\u6309\u4fdd\u5b58\u7684\u5b57\u6bb5\u987a\u5e8f\u5bfc\u51fa\u5185\u5bb9\n             \t\t\tfor(int j = 0; j &lt; methodNameList.size(); j++){\n             \t\t\t\t//\u6839\u636ekey\u83b7\u53d6\u5bf9\u5e94\u65b9\u6cd5\n             \t\t\t\tmethod = getMap.get(\"GET\" + methodNameList.get(j).toString().toUpperCase());\n             \t\t\t\tif(method != null){\n             \t\t\t\t\t//\u4ece\u5bf9\u5e94\u7684get\u65b9\u6cd5\u5f97\u5230\u8fd4\u56de\u503c\n             \t\t\t\t\t//System.out.println(\"method: \" + method);\n             \t\t\t\t\tString value = \"\";\n             \t\t\t\t\t\n             \t\t\t\t\tif(method.invoke(objClass, (Object[])null) != null){\n             \t\t\t\t\t\t//20160304 update\n             \t\t\t\t\t\tif(method.getGenericReturnType().toString().equals(\"class java.util.Date\")){\n             \t\t\t\t\t\t\t SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n             \t\t\t\t\t\t\t \n             \t\t\t\t\t\t\t if(method.invoke(objClass, (Object[])null) == null){\n             \t\t\t\t\t\t\t\t value = \"\";\n             \t\t\t\t\t\t\t }else{\n             \t\t\t\t\t\t\t\t value = formatter.format(method.invoke(objClass, (Object[])null));\n             \t\t\t\t\t\t\t }\n             \t\t\t\t\t\t}else{\n             \t\t\t\t\t\t\t if(method.invoke(objClass, (Object[])null) == null){\n             \t\t\t\t\t\t\t\t value = \"\";\n             \t\t\t\t\t\t\t }else{\n             \t\t\t\t\t\t         value = method.invoke(objClass, (Object[])null).toString();\n             \t\t\t\t\t\t\t }\n             \t\t\t\t\t\t}\n             \t\t\t\t\t}\n             \t\t\t\t\t//\u5e94\u7528wcfc\u6837\u5f0f\u521b\u5efa\u5355\u5143\u683c\n             \t\t\t\t\tsheet.addCell(new Label(j, i+1, value, wcfc));\n             \t\t\t\t}else{\n             \t\t\t\t\tsheet.addCell(new Label(j, i+1, \"\", wcfc));\n             \t\t\t\t}\n             \t\t\t}   //\u5185\u5bb9\u5bfc\u51fa\u91cc\u5c42for\u5faa\u73af\u7ed3\u675f\n             \t\t}       //\u5185\u5bb9\u5bfc\u51fa\u5916\u5c42for\u5faa\u73af\u7ed3\u675f\n             \t}       //recordList\u4e0d\u4e3a\u7a7a\n             \t\n             }/*else{   //\u5b57\u6bb5\u53c2\u6570\u4e3anull\n             \tthrow new Exception(\"\u4f20\u5165\u53c2\u6570\u4e0d\u5408\u6cd5\");\n             }*/\n     \t\n     \t\n     }\n      \n      private static void exportToExcel4(List&lt;Object&gt; dataList, String filePath,\n  \t\t\tOutputStream out, List&lt;Map&lt;String, String&gt;&gt; mapFieldList,\n  \t\t\tList&lt;int[]&gt; colsSizeList, List&lt;String&gt; sheetNameList)  {\n  \t\t// TODO Auto-generated method stub\n    \tWritableWorkbook wook = null;\n    \ttry{\n    \t\twook = Workbook.createWorkbook(out); //\u53ef\u5199\u7684\u5de5\u4f5c\u7c3f\u5bf9\u8c61\n    \t\t\n    \t\tfor(int i=0; i&lt;sheetNameList.size(); i++){\n    \t\t\tList&lt;Object&gt; recordList = (List&lt;Object&gt;)dataList.get(i);\n    \t\t\tMap&lt;String,String&gt; mapFileds = mapFieldList.get(i);\n    \t\t\tint[] colsSize = colsSizeList.get(i);\n    \t\t\tString sheetName = sheetNameList.get(i);\n    \t\t\t\n    \t\t\tlogger.info(\"i - \" + i + \" : sheetName - \" + sheetName);\n    \t\t\t\n    \t\t\texportToExcelSheet(recordList,null,out,mapFileds,colsSize,sheetName,wook,i);\n    \t\t}\n    \t\t\n    \t\twook.write();\n         \tSystem.out.println(\"\u5bfc\u51faExcel\u6210\u529f\");\n    \t}catch(Exception e){\n    \t\te.printStackTrace();\n    \t}finally{\n    \t\ttry{\n    \t\t\tif(wook != null){\n    \t\t\t\twook.close();\n    \t\t\t}\n    \t\t\tif(out != null){\n    \t\t\t\tout.flush();\n    \t\t\t\tout.close();\n    \t\t\t}\n    \t\t}catch(Exception e2){\n    \t\t\te2.printStackTrace();\n    \t\t}\n    \t} //finally\u7ed3\u675f\n  \t}  \n\tpublic static void ImportExcel4(List&lt;Object&gt; dataList,\n\t\t\tOutputStream out,\n\t\t\tList&lt;Map&lt;String, String&gt;&gt; mapFieldList, List&lt;int[]&gt; colsSizeList,\n\t\t\tList&lt;String&gt; sheetNameList) {\n\t\t// TODO Auto-generated method stub\n\t\texportToExcel4(dataList,null,out,mapFieldList,colsSizeList,sheetNameList);\n\t}\n  \t\n\n}\n</code></pre>\n\n<p>2.\u8c03\u7528\u5f62\u5f0f</p>\n\n<pre class=\"has\">\n<code class=\"language-java\">//1.\u6807\u9898\nMap&lt;String, String&gt; mapField = new LinkedHashMap&lt;String, String&gt;();\nmapField.put(\"num\", \"\u5e8f\u53f7\");//0 \n//2.\u8bbe\u7f6e\u5217\u5bbd\nInteger fieldNum = mapField.keySet().size();\nint[] colsSize = new int[fieldNum];\n\nfor(int i=0; i&lt;fieldNum; i++){\n    if(i==0 || i==1 || i==2 || i==3){\n          colsSize[i] = 8;\n    }else if(i==7){ //\u9700\u6c42\u540d\u79f0\n          colsSize[i] = 16;\n    }else if(i==8 || i==15){ //\u9700\u6c42\u63cf\u8ff0 \u9a8c\u8bc1\u65b9\u6848\n          colsSize[i] = 30;\n    }else{\n          colsSize[i] = 12;\n     }\n}\n//3.\u6807\u9898\u884c\nList&lt;Object&gt; titleList = new ArrayList&lt;Object&gt;();\n\n//\u7b2c\u4e00\u884c\nList&lt;Object&gt; tempList1 = new ArrayList&lt;Object&gt;();\ntempList1.add(\"\u5e8f\u53f7\");  // 1\n//\u7b2c\u4e8c\u884c\nList&lt;Object&gt; tempList2 = new ArrayList&lt;Object&gt;();\ntempList2.add(\"\u5e8f\u53f7\");  // 1\ntitleList.add(tempList1);\ntitleList.add(tempList2);\n\n//4.\u8bbe\u7f6e\u5408\u5e76\u5355\u5143\u683c\u7684\u5217\u8868\u5750\u6807 \u8d77\u59cb\u5217 \u8d77\u59cb\u884c  \u7ed3\u675f\u5217  \u7ed3\u675f\u884c\nList&lt;Object&gt; mergePosList = new ArrayList&lt;Object&gt;();\nList&lt;Object&gt; tempPosList1 = new ArrayList&lt;Object&gt;();\ntempPosList1.add(18);\ntempPosList1.add(0);\ntempPosList1.add(23);\ntempPosList1.add(0);\n\nList&lt;Object&gt; tempPosList2 = new ArrayList&lt;Object&gt;();\ntempPosList2.add(24);\ntempPosList2.add(0);\ntempPosList2.add(29);\ntempPosList2.add(0);\nmergePosList.add(tempPosList1);\nmergePosList.add(tempPosList2);\n\n//5.\u5c06\u67e5\u8be2\u5bf9\u8c61\u5217\u8868\u8f6c\u5316\u4e3a\u5bfc\u51fa\u9700\u8981\u7684\u5f62\u5f0f\nList&lt;Object&gt; dataList = ExcelUtil.convertObjectListToDataList(resultList,keyList);\n\nresponse.reset();\nresponse.setContentType(\"application/msexcel\");\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\nString nowTime = sdf.format(new Date());\nString fileName = nowTime + \"_\u5bfc\u51fa\u5217\u8868\";\nresponse.setHeader(\"content-disposition\", \"attachment;filename=\" + new \nString(fileName.getBytes(\"gb2312\"),\"iso8859-1\") + \".xls\");\n\nExcelUtil.ImportExcel3(dataList,response.getOutputStream(), titleList, colsSize, fileName, mergePosList);\n </code></pre>\n\n<p>\u00a0</p>            </div>",
       "aut_id":2,
       "ch_id":11,
       "aut_name":"\u7fd4\u7237",
       "aut_photo":"http://toutiao-img.itheima.net/Ftxsj6MCTJRUpQl7hWCPJdXK5_mD",
       "is_followed":false,
       "attitude":null,
       "is_collected":false,
       "recomments":[
          
       ]
    }
 }